str(pca)
pca$rotation
trainpc=predict(pca,reddata)
trainpc
pca=preProcess(reddata,method="pca",thresh=.8)
pca
trainpc=predict(pca,reddata)
trainpc
View(training)
datawith=data.frame(diognosis,trainpc)
View(training)
datawith=train(training$diognosis~.,method="glm",data=trainpc)
View(training)
datawith=train(training$diagnosis~.,method="glm",data=trainpc)
install.packages("e1071")
datawith=train(training$diagnosis~.,method="glm",data=trainpc)
datawith
datawithout=train(training$diagnosis~.,method="glm",data=training)
datawithout=train(training$diagnosis~.,method="glm",data=training[,kes])
datawithout
kes
head(training[,kes])
datawithout=train(training$diagnosis~.,method="glm",data=training[,kes])
datawithout
trainpc
datawithout=data.frame(training$diagnosis,training[,kes])
dim(datasithout)
dim(datawithout)
datawitho=train(training$diagnosis~.,method="glm",data=datawithout)
datawitho=train(datawithout$diagnosis~.,method="glm",data=datawithout)
datawitho=train(diagnosis~.,method="glm",data=datawithout)
datawithout
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
name=colnames(training)
kes=grep("^IL.",name)
reddata=training[,kes]
pca=preProcess(reddata,method="pca",thresh=.8)
trainpc=predict(pca,reddata)
datawith=train(training$diagnosis~.,method="glm",data=trainpc)
datawithout=data.frame(training$diagnosis,training[,kes])
datawitho=train(diagnosis~.,method="glm",data=datawithout)
View(datawithout)
datawitho=train(training$diagnosis~.,method="glm",data=training[,kes])
datawitho
training[,kes]
tra2=training[,kes]
datawitho=train(training$diagnosis~.,method="glm",data=tra2)
datawitho
kes=grep("^IL|^diagnosis",name)
kes
kes=grepl("^IL|^diagnosis",name)
kes=grep("^IL",name)
createDataPartition(adData$diagnosis, p = 3/4)
createDataPartition(adData$diagnosis, p = 3/4)[[1]]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
name=colnames(training)
kes=grep("^IL",name)
reddata=training[,kes]
pca=preProcess(reddata,method="pca",thresh=.8)
trainpc=predict(pca,reddata)
datawith=train(training$diagnosis~.,method="glm",data=trainpc)
datawith
trainpc
str(datawith)
testpc=predict(pca,testing[,kes])
confusionMatrix(testing$diagnosis,predict(datawith,testpc))
View(testing)
confusionMatrix(testing$diagnosis,predict(datawitho,testing[,kes]))
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
ageg=cut2(training$Age,g=4)
Cementg=cut2(training$Cement,g=4)
BlastFurnaceSlagg=cut2(training$BlastFurnaceSlag,g=4)
FlyAshg=cut2(training$FlyAsh,g=4)
Waterg=cut2(training$Water,g=4)
Superplasticizerg=cut2(training$Superplasticizer,g=4)
CoarseAggregateg=cut2(training$CoarseAggregate,g=4)
FineAggregateg=cut2(training$FineAggregate,g=4)
row=as.numeric(row.names(training))
qplot(sort(row),training$CompressiveStrength,data=training,colour=ageg)
qplot(sort(row),training$CompressiveStrength,data=training,colour=Cementg)
qplot(sort(row),training$CompressiveStrength,data=training,colour=BlastFurnaceSlagg)
qplot(sort(row),training$CompressiveStrength,data=training,colour=FlyAshg)
qplot(sort(row),training$CompressiveStrength,data=training,colour=Waterg)
qplot(sort(row),training$CompressiveStrength,data=training,colour=CoarseAggregateg)
qplot(sort(row),training$CompressiveStrength,data=training,colour=Superplasticizerg)
qplot(sort(row),training$CompressiveStrength,data=training,colour=FineAggregateg)
View(testing)
View(training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
View(segmentationOriginal)
library(caret)
data=data(segmentationOriginal)
attach(data)
data1=data(segmentationOriginal)
View(segmentationOriginal)
data1<-data(segmentationOriginal)
attach(segmentationOriginal)
names(segmentationOriginal)
testIndex = createDataPartition(Case, p = 0.60,list=FALSE)
training = segmentationOriginal[-testIndex,]
testing = segmentationOriginal[testIndex,]
tree<-train(Case~.,data=train,method="rpart")
tree<-train(Case~.,data=training,method="rpart")
print(tree)
data12<-c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
data12
data12<-c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
data12
data14<-c(TotalIntench2 = 57000, FiberWidthCh1 = 8,VarIntenCh4 = 100)
data14
data15<-c(FiberWidthCh1 = 8,VarIntenCh4 = 100, PerimStatusCh1=2 )
predict(tree,newdata=data12)
Case
tree<-train(Class~.,data=training,method="rpart")
predict(tree,newdata=data12)
head(segmentationOriginal)
testIndex = createDataPartition(Case,list=FALSE)
testIndex
table(Case)
testIndex = createDataPartition(Case,list=FALSE)
training = segmentationOriginal[-testIndex,]
testing = segmentationOriginal[testIndex,]
set.seed(125)
tree<-train(Class~.,data=training,method="rpart")
plot(tree,uniforme=T,main="Tree")
plot(tree$finalModel,uniforme=T,main="Tree")
text(tree$finalModel,use.n=T,all=T,cex=.7)
library(pgmm)
install.packages("C:/Users/lucp7657/Desktop/An Introduction to Statistical Learning/COURSERA/PRACTICAL MACHINE LEARNING/WEEK3/pgmm_1.0.tar.gz", repos = NULL, type = "source")
library(pgmm)
olive<-load("C:\\Users\\lucp7657\\Desktop\\An Introduction to Statistical Learning\\COURSERA
\\PRACTICAL MACHINE LEARNING\WEEK3\\pgmm_1.0.tar\\pgmm_1.0\\pgmm\\dataolive.rda")
olive<-load("C:\\Users\\lucp7657\\Desktop\\An Introduction to Statistical Learning\\COURSERA
\\PRACTICAL MACHINE LEARNING\WEEK3\\pgmm_1.0.tar\\pgmm_1.0\\pgmm\\olive.rda")
olive<-load("C:\\Users\\lucp7657\\Desktop\\An Introduction to Statistical Learning\\COURSERA
\\PRACTICAL MACHINE LEARNING\\WEEK3\\pgmm_1.0.tar\\pgmm_1.0\\pgmm\\olive.rda")
load("C:/Users/lucp7657/Desktop/An Introduction to Statistical Learning/COURSERA/PRACTICAL MACHINE LEARNING/WEEK3/pgmm_1.0.tar/pgmm_1.0/pgmm/data/olive.rda")
View(olive)
olive = olive[,-1]
treolive<-train(Area~.,data=olive,method="rpart")
treolive
newdata = as.data.frame(t(colMeans(olive)))
predict(treolive,newdata=newdata)
newdata
load("C:/Users/lucp7657/Desktop/An Introduction to Statistical Learning/COURSERA/PRACTICAL MACHINE LEARNING/WEEK3/pgmm_1.0.tar/pgmm_1.0/pgmm/data/olive.rda")
olive = olive[,-1]
treolive<-train(Area~.,data=olive,method="rpart")
treolive<-train(Area~.,data=olive,method="tree")
install.packages("tree")
library("tree", lib.loc="C:/Program Files/R/R-3.1.0/library")
treolive<-tree(Area~.,data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(treolive,newdata=newdata)
View(newdata)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
log<-train(chd~.,method="glm",family="binomial")
log<-train(chd~.,data=trainSA,method="glm",family="binomial")
logi<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
warnings()
logi<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
class(logi)
obs=predict(logi,type="prob")
obs=predict(logi,type="prob")
obs=predict(logi,type="raw")
obs
missClass(values=chd,prediction=obs)
obs=predict(logi,type="raw",data=testSA)
testSA
obs=predict(logi,type="raw",data=testSA[,-c(1,4,5,10)])
obs=predict(logi,type="raw",newdata=testSA[,-c(1,4,5,10)])
obs=predict(logi,type="raw",newdata=testSA[,-c(1,4,10)])
obs
obs=predict(logi,type="raw")
newdata=testSA[,-c(1,4,10)]
testSA[,-c(1,4,10)]
testSA[,-c(1,4,5,10)]
obs=predict(logi,type="raw",newdata=testSA[,-c(1,4,5,10)])
obs1=predict(logi,type="raw")
missClass(values=obs1,prediction=obs)
obs1
chd
View(trainSA)
obs1=predict(logi,type="prob")
obs1=predict(logi)
obs1=predict(logi)
obs1
missClass(values=231,prediction=obs)
missClass(values=21,prediction=obs)
data(vowel.train)
data(vowel.test)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
vowel.train
View(vowel.train)
datan=data.frame(as.factor(vowel.train[,1],vowe.train[,-1]))
datan=data.frame(as.factor(vowel.train[,1]),vowe.train[,-1])
datan=data.frame(as.factor(vowel.train[,1]),vowel.train[,-1])
datan
datan=data.frame(factor(vowel.train[,1]),vowel.train[,-1])
datan
y=factor(vowel.train[,1])
datan=data.frame(y,vowel.train[,-1])
datan
str(datan)
rfr=train(y~.,data=datan,method="rf")
rfNews()
rfr=train(y~.,data=datan,method="rf")
varImp(rfr)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logi<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
obs1=predict(logi)
obs=predict(logi,type="raw",newdata=testSA[,-c(1,4,5,10)])
missClass(values=trainSA$chd,prediction=obs)
missClass(values=trainSA$chd,prediction=obs1)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logi<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
obs1=predict(logi,newdata=trainSA)
obs=predict(logi,type="raw",newdata=testSA[,-c(1,4,5,10)])
missClass(values=trainSA$chd,prediction=obs)
missClass(values=trainSA$chd,prediction=obs1)
libPaths()
.libPaths()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
head(vowel.train)
library(caret)
rf<-train(y~.,data=vowel.train,methods="rf")
data2=data.frame(factor(vowel.train[,1]),vowel.train[,-1])
str(data2)
data2=data.frame(factor(y=vowel.train[,1]),vowel.train[,-1])
data2=data.frame(factor(vowel.train[,1]=y),vowel.train[,-1])
data2=data.frame(factor(vowel.train[,1]$y),vowel.train[,-1])
data2=data.frame(factor(vowel.train$y),vowel.train[,-1])
str(data2)
attach(vowel.train)
data2=data.frame(factor(y),vowel.train[,-1])
str(data2)
data2=data.frame(as.factor(y),vowel.train[,-1])
str(data2)
head(data2)
data2=data.frame(factor(y),vowel.train[,-1])
head(data2)
rf<-train(factor.y.~.,data=vowel.train,methods="rf")
rf<-train(factor.y.~.,data=data2,methods="rf")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
attach(vowel.train)
data2=data.frame(factor(y),vowel.train[,-1])
library(caret)
rf<-train(factor.y.~.,data=data2,methods="rf")
set.seed(33833)
rf<-train(factor.y.~.,data=data2,methods="rf")
rf<-train(factor.y.~.,data=data2,methods="rf",proxy=T)
rf
rf2<-predict(rf,vowl.train)
rf2<-predict(rf,vowel.test)
rf2
vowel.test$right<-rf2==vowel.test$y
table(rf2,vowel.test$y)
boos<-train(factor.y.~.,data=data2,methods="gbm",verbose=F)
boos
rf
rf2
str(rf2)
class(rf2)
View(data2)
y<-vowel.train[,1]
data2=data.frame(factor(y),vowel.train[,-1])
data2
data2=data.frame(as.factor(y),vowel.train[,-1])
data2
data2=data.frame(factor(y),vowel.train[,-1])
attach(vowel.test)
y<-vowel.train[,1]
y2<-vowel.test[,1]
data3=data.frame(factor(y2),vowel.test[,-1])
set.seed(33833)
rf<-train(factor.y.~.,data=data3,methods="rf",proxy=T)
rf<-train(factor.y2.~.,data=data3,methods="rf",proxy=T)
rf2<-predict(rf,vowel.test)
vowel.test$right<-rf2==vowel.test$y
table(rf2,vowel.test$y)
boos<-train(factor.y2.~.,data=data3,methods="gbm",verbose=F)
boos2<-predict(boos,vowel.test)
vowel.test$right<-boos2==vowel.test$y
table(boos2,vowel.test$y)
boos
rf
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
View(predictors)
rf<-train(diagnosis~.,data=training,methods="rf",proxy=T)
boos<-train(diagnosis~.,data=training,methods="gbm",verbose=F)
ldaa<-train(diagnosis~.,data=training,methods="lda",verbose=F)
rf
boos
ldaa
rf<-train(diagnosis~.,data=training,methods="rf",trControl=trainControl(method="cv"),number=3)
rf
pred1<-predict(rf,testing);pred2<-predict(boos,testing);prede<-predict(ldaa,testing)
predf<-data.frame(pred1,pred2,pred3,testing$diagnosis)
pred1<-predict(rf,testing);pred2<-predict(boos,testing);pred3<-predict(ldaa,testing)
predf<-data.frame(pred1,pred2,pred3,testing$diagnosis)
predf
comb<-train(diagnosis~.,data=predf,method="rf")
pred1
pred2
pred3
testing$diagnosis
comb<-train(diagnosis~.,data=predf,method="rf")
View(predf)
comb<-train(testing.diagnosis~.,data=predf,method="rf")
comb
rf
boos
ldaa
boos
comb
rf
set.seed(62433)
rf<-train(diagnosis~.,data=training,methods="rf",trControl=trainControl(method="cv"),number=3)
rf
set.seed(62433)
boos<-train(diagnosis~.,data=training,methods="gbm",verbose=F)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(training)
lass<-train(CompressiveStrength~.,data=train,method="lasso")
lass<-train(CompressiveStrength~.,data=training,method="lasso")
lass
plot(lass)
str(lass)
plot(lass$index)
gl<-glmnet(CompressiveStrength~.,data=training,alpha=1)
library("glmnet", lib.loc="C:/Program Files/R/R-3.1.0/library")
gl<-glmnet(CompressiveStrength~.,data=training,alpha=1)
gl<-glmnet(training[,-9],training[,9],alpha=1)
class(training)
dim(training)
training[,9]
training[,-9]
head(training)
names(training)
gl<-glmnet(training[,-9],training[,9],alpha=1)
gfl<-glmnet(training[,-9],training[,9],alpha=1)
lass$finalModel
?plot.enet
class(lass)
plot(lass,xvar="penality")
plot(lass)
plot(lass,xvar="L1norm")
gfl<-enet(training[,-9],training[,9],alpha=1)
gfl<-enet(training[,-9],training[,9],lambda=1)
attach(training)
set.seed(233)
lass<-train(CompressiveStrength~.,data=training,method="lasso")
plot(lass)
plot(lass,xvar="L1norm")
gfl<-enet(training[,-9],training[,9],lambda=1)
gfl<-enet(matrix(training[,-9]),training[,9],lambda=1)
gfl<-enet(matrix(training[,-9]),vector(training[,9]),lambda=1)
lass
summary(lass)
lass$L1norm
str(lass)
lass$coefnames
h=lass$finalModel
str(h)
h$beta.pure
plot(h$beta.pure)
h$action
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
sv<-svm(CompressiveStrength~.,data=training)
predict(sv,newdata=testing)
f=predict(sv,newdata=testing)
rmse=mean((CompressiveStrength-ff)^2)
rmse=mean((CompressiveStrength-f)^2)
rmse=mean((testing$CompressiveStrength-f)^2)
rmse
dat<-read.csv("C:\\Users\\lucp7657\\Desktop\\An Introduction to Statistical Learning\\COURSERA\\PRACTICAL MACHINE LEARNING\\WEEK4\\gaData.csv")
View(dat)
training = dat[year(dat$date)  2011,]
library("Hmisc", lib.loc="C:/Program Files/R/R-3.1.0/library")
training = dat[year(dat$date)  2011,]
year(dat$date)
detach("package:Hmisc", unload=TRUE)
library("lubridate", lib.loc="C:/Program Files/R/R-3.1.0/library")
training = dat[year(dat$date)  2011,]
year(dat$date)
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
View(training)
tstrain
install.packages("forecast")
library("forecast", lib.loc="C:/Program Files/R/R-3.1.0/library")
View(training)
md=bats(date,data=training)
str(training)
md=bats(msts(date),data=training)
md=bats(ts(date),data=training)
rep=ts(date,data=training)
rep=ts(data=training)
rep
md=bats(date,data=rep)
dat.fit <- bats(training$visitsTumblr)
pred <- forecast(dat.fit, h=length(testing$visitsTumblr),level=c(80,95))
pred <- forecast(dat.fit, h=length(tstrain$visitsTumblr),level=c(80,95))
dat.fit
pred <- forecast(dat.fit, h=length(tstrain),level=c(80,95))
max(pred$lower[,2])
accuracy <- 1-sum(tstrain>pred$upper[,2])/length(tstrain)
accuracy
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
attach(vowel.train)
attach(vowel.test)
y<-vowel.train[,1]
y2<-vowel.test[,1]
data2=data.frame(factor(y),vowel.train[,-1])
data3=data.frame(factor(y2),vowel.test[,-1])
library(caret)
set.seed(33833)
rf<-train(factor.y2.~.,data=data3,methods="rf",proxy=T)
rf2<-predict(rf,vowel.test)
boos<-train(factor.y2.~.,data=data3,methods="gbm",verbose=F)
boos2<-predict(boos,vowel.test)
mean(rf2==boos2)
boos2
rf2
rf
boos
sum(rf2==boos2)
rf2
rf2==boos2
setwd("C:\\Users\\lucp7657\\writeup")
destfile = "pml-training.csv")
pml.testing <- read.csv("pml-testing.csv"))
pml.training <- read.csv("pml-training.csv")
pml.testing <- read.csv("pml-testing.csv")
